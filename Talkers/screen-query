#!/bin/bash
# there's a few commands and /help documents them

#set -eEuo pipefail
#trap 'echo "Error on line $LINENO"; read -rp "Press enter to exit..."; exit 1' ERR

# This is an OS X install-time hack
#@@INJECTPATH

tmp=$(python3 -c "import tempfile;print(tempfile.gettempdir())")
MDIR=$tmp/screen-query
[[ -d $MDIR ]] || (mkdir $MDIR && chmod 0777 $MDIR)
MDIR=$MDIR/$UID
[[ -d $MDIR ]] || mkdir $MDIR

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
HISTFILE="$MDIR/history"
HISTSIZE=1000
INJECT=
MDREAD=sd
[[ -r $MDIR/DUI ]] || echo OFF > $MDIR/DUI
DUI=$(< $MDIR/DUI )
DUIPROMPT='(Note: You are now in Do-Ur-Inspection mode: the contents of "command" inside this syntax "%ðŸ¥‚commandðŸš—%" will be run in bash with the output returned to you, for instance `%ðŸ¥‚ls -lðŸš—%`. Keep track of them and stay focused. Only run what is necessary. Remember, if you mention it N times, N things will run, so use it carefully. If you want the user to run something, do not use the special syntax. That is only for you. Your current path is '$PWD')'
CAPTURE="ON"

[[ -r $HOME/.local/bin/sd ]] && MDREAD=$HOME/.local/bin/sd
[[ -f "$HISTFILE" ]] || touch "$HISTFILE"
history -r "$HISTFILE"
trap 'history -w "$HISTFILE"' EXIT
if [[ $(uname) == "Linux" ]]; then
  config=".config"
else
  config="Library/Application Support"
fi

if [[ -r "$HOME/$config/io.datasette.llm/default_model.txt" ]]; then
    model=$(cat "$HOME/$config/io.datasette.llm/default_model.txt")
else
    model=$(llm models default)
fi

[[ -n "$TMUX" ]] && my_id=$(tmux display-message -p '#{pane_id}') || my_id=

help() {
  if [[ "$#" -gt 0 ]]; then 
    {
        echo "### Parameters"
        echo -e "  * **System Prompt**:\n> " $SYSTEM
        echo "  * **Model**: $model"
        echo "  * **CID**: ${conv_id:-*(Not available until first message)*}"
        echo "  * **TMP**: $MDIR"
        echo -e "\n### Commands"

    } | $MDREAD
    system_prompt
  fi
  cat <<END
  /choose   - Switch pane capture focus.
  /mindwipe - Forget this crazy world and start over.
  /model    - Switch model.
  /sshot    - Raster screenshot.
  /dui      - Toggle agentic. (current: $DUI)
  /capture  - Toggle capture. (current: $CAPTURE)
  shell-cmd | sq-add [-c cid] [prompt] - Add the output of shell-cmd to the context.
END
}
system_prompt() {
SYSTEM=$(cat <<END
You are an interactive debugging buddy in tmux. You will get capture-pane -p followed by questions when the pane output changes. 
They are using $(uname -ar) and can change the capture focus. You will be notified when this happens and when our cid is established. These come in the form (Note: <message>).
They are using a markdown formatter. Only insert newlines into code braces for syntax.
They can do the following: $(help)
END
[[ "$DUI" == "ON" ]] && echo "$DUIPROMPT"
)
}

system_prompt
pane_id=${1-}
conv=
forcecapture=
[[ -r $MDIR/${pane_id}.convo ]] && conv_id=$(cat $MDIR/${pane_id}.convo) || conv_id=

touch $MDIR/${pane_id}.convo 
touch $MDIR/${pane_id}.old

flash() {
    if [[ -n "$TMUX" ]]; then
        tmux select-pane -t $pane_id -P 'bg=colour95'; sleep 0.03
        tmux select-pane -t $pane_id -P 'bg=color129'; sleep 0.03
        tmux select-pane -t $pane_id -P 'bg=default' 
        tmux select-pane -t $my_id
    fi
    set_prompt
}

getmodel() {
    if [[ -r "$HOME/$config/io.datasette.llm/default_model.txt" ]]; then
        model=$(cat "$HOME/$config/io.datasette.llm/default_model.txt")
    else
        model=$(llm models default)
    fi
    model=$(echo "$model" | cut -d '/' -f 3-)
}

getmodel

set_prompt() {
    local camera="â€” "
    local dui="â€” "
    [[ -n "$TMUX" && $CAPTURE == "ON" ]] && camera="ðŸ“·"
    [[ $DUI == "ON" ]] && dui="ðŸš—"
    prompt="${camera} ${dui} > "
}

choose() {
    [[ -z "$TMUX" ]] && return
    tmux display-panes -d 0 "run-shell 'echo %% > $MDIR/pane-id'"
    if [[ $? == "1" ]] ; then
        echo "Exiting due to possible infinite loop."
        exit 1
    fi
    if [[ -e $MDIR/pane-id ]]; then 
        pane_id=$(cat $MDIR/pane-id)
        echo "Using $pane_id"
        flash
        rm $MDIR/pane-id
        tmux select-pane -t $my_id
        touch $MDIR/${pane_id}.{convo,old}
        INJECT=" (Note: User changed focus to a new tmux pane)"
    else
        echo "Cancelled"
    fi
}

last() {
    amount=${1:-40}
    if [[ -z "$conv_id" ]]; then
        if [[ -r $MDIR/last.conv ]]; then
            conv_id=$( cat $MDIR/last.convo )
        else 
            conv_id=$(sqlite3 "$HOME/$config/io.datasette.llm/logs.db" "select conversation_id from responses order by datetime_utc desc limit 1")
        fi
    fi
    { echo "# [ $conv_id ] "; llm logs list --cid $conv_id | tail -$amount; } | $MDREAD -c <(echo -e "[style]\nMargin = 4")
    conv="--cid $conv_id"
}

mindwipe() {
    echo "Memory has been wiped."
    system_prompt
    conv=
    conv_id=
    getmodel
    forcecapture=1
}

process_cmd() {
    infile="$1"
    n=$2
    local base="${infile}.${n}"
    {
        local llm_in="${base}-IN"
        local llm_parse="${base}-OUT"
        #echo $llm_in $llm_parse
        err=0

        for cmdfile in $(cat "$base" | "$DIR/simple-parse.py" -r "%ðŸ¥‚(.*)ðŸš—%" -b "$llm_parse"); do
            #echo "## $cmdfile"
            if [[ $DUI == "ON" ]]; then
                cmd=$( < "$cmdfile" )
                echo "### $cmd" | tee -a $llm_in
                echo '```bash'
                { echo "set -eEuo pipefail"; cat "$cmdfile"; } > "${cmdfile}.safe"
                {
                    bash "${cmdfile}.safe" | tee -a $llm_in | head -30
                    [[ $? -ne 0 ]] && err=$?
                }
                echo '```'
            else
                echo "~~ $match ~~ "
            fi
        done

        if [[ $err == 0 && $DUI == "ON" && -s "$llm_in" ]]; then
            (( n++ ))
            cat "$llm_in" | llm "You ran Do-Ur-Inspection commands" $conv  | tee "${infile}.${n}"
        fi
    } | $MDREAD -c <(echo -e "[style]\nMargin = 4")
}

oneshot() {
    echo "$*" >> $MDIR/input.txt
    llm "$*" -s "$SYSTEM" $conv >> $MDIR/output.txt &
}
    
capture() {
    if [[ $CAPTURE == "ON" ]]; then
        echo "Capturing off. Shades are drawn!"
        CAPTURE=OFF
        INJECT="$INJECT (Note: User turned capture off)"
    else
        while ! tmux list-panes -t "$pane_id" &>/dev/null; do
            echo "Woops, the pane disappeared. Choose another!"
            choose
        done

        flash
        echo "Capturing on. I see you!"
        INJECT="$INJECT (Note: User turned capture on)"
        CAPTURE=ON
    fi
}

dui() {
    if [[ "$DUI" == "ON" ]]; then
        DUI=OFF
        echo "Sobering up.";
        oneshot "(Note: Do-Ur-Inspection is now off. Do not talk about it. It no longer exists. Piping into sq-add is still available)"
    else
        DUI=ON
        echo "Fuck it, let's roll!"
        oneshot "$DUIPROMPT"
    fi
    echo $DUI > $MDIR/DUI
} 

set_prompt
ata=""
if [[ -n "$conv_id" ]]; then
    last 5
else
    echo "Conversation Start: Type /help for options"
fi
flash

while [ 0 ]; do 
    echo
    input=""
    pline="$prompt"
    while IFS= read -rep "$pline" line || exit; do
        if [[ "$line" == *\\ ]]; then
            input+="${line%\\}"
            input+=$'\n'
        else
            input+="$line"
            break
        fi
        pline="   |  "
    done
    echo 

    _uuid=$(date +%s.%N)

    [[ -z "$input" ]] && break
    history -s "$input"  # Save to history
 
    if [[ $input =~ ^/ ]]; then
        if [[ $input =~ ^/sshot ]]; then
            sshot=$(mktemp --suffix=.png -p $MDIR)
            import $sshot
            ata="-a $sshot"
            echo "Next prompt will use your screen shot"
        elif [[ $input =~ (capture|last|dui|mindwipe|choose|flash) ]]; then
            ${input:1}
        elif [[ $input == "/model" ]]; then
            chosen=$(llm models list | fzf-tmux | cut -d ':' -f 2- | sed 's/^\s//g' )
            if [[ -n "$chosen" ]]; then
              echo "Setting to $chosen"
              llm models default $chosen
              mindwipe
            fi
        else
            help 1
        fi
        set_prompt
        continue
    else
        text="$input"
    fi

    # synchronize input & output
    { echo -e "\n\n"; echo "$conv_id:${_uuid}"; } | tee -a $MDIR/input.txt | cat >> $MDIR/output.txt 
    echo "($text)" >> $MDIR/input.txt

    if [[ $CAPTURE == "ON" ]]; then
        while ! tmux capture-pane -t "${pane_id}" -p > $MDIR/${pane_id}.new; do
            echo "Choose another pane"
            choose
        done
    fi

    n=0
    in="$MDIR/${conv_id}_${_uuid}"
    {
       if [[ $CAPTURE == "ON" ]]; then
            _pid=$(tmux display -pt "$pane_id" '#{pane_pid}')
            {
                if [[ $(uname) == "Linux" ]]; then
                    echo "[process hierarchy: $(ps -o comm= --ppid $_pid -p $_pid)]"
                fi

                if [[ -n "$forcecapture" ]]; then
                    cat $MDIR/${pane_id}.new
                    focecapture=
                else
                    diff $MDIR/${pane_id}.new $MDIR/${pane_id}.old > /dev/null \
                        && echo \
                        || { echo "[capture-pane -p:"; cat $MDIR/${pane_id}.new; echo "]"; }
                   cp $MDIR/${pane_id}.new $MDIR/${pane_id}.old
                fi
            } | grep -Ev "^$"         \
              | tee -a $MDIR/input.txt 
         fi

    } | llm "${text}${INJECT}" -s "$SYSTEM" $ata $conv \
      | tee "${in}.${n}" \
      | $MDREAD -c <(echo -e "[style]\nMargin = 4")

    if [[ $DUI == "ON" ]]; then
        while true; do
            process_cmd "$in" $n
            (( n++ ))
            [[ -s "${in}.${n}" ]] || break
        done
    fi

    echo "${text}${INJECT}" >> $MDIR/input.txt

    INJECT=

    if [[ -z "$conv" ]]; then
        conv_id=$(sqlite3 "$HOME/$config/io.datasette.llm/logs.db" "select conversation_id from responses order by datetime_utc desc limit 1")
        echo $conv_id > $MDIR/${pane_id}.convo
        echo $conv_id > $MDIR/last.convo
        conv="--cid $conv_id"
        INJECT=" (Note: cid is $conv_id - there is no need to mention this)"
    fi
    ata=""
done
