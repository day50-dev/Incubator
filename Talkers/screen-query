#!/bin/bash
# there's a few commands and /help documents them

#set -eEuo pipefail
#trap 'echo "Error on line $LINENO"; read -rp "Press enter to exit..."; exit 1' ERR

# This is an OS X install-time hack
#@@INJECTPATH

MDIR=/tmp/screen-query
[[ -d $MDIR ]] || (mkdir $MDIR && chmod 0777 $MDIR)
MDIR=$MDIR/$UID
[[ -d $MDIR ]] || mkdir $MDIR

HISTFILE="$MDIR/history"
HISTSIZE=1000
INJECT=
MDREAD=sd
[[ -r $MDIR/DUI ]] || echo OFF > $MDIR/DUI
DUI=$(< $MDIR/DUI )

[[ -r $HOME/.local/bin/sd ]] && MDREAD=$HOME/.local/bin/sd
[[ -f "$HISTFILE" ]] || touch "$HISTFILE"
history -r "$HISTFILE"
trap 'history -w "$HISTFILE"' EXIT
if [[ $(uname) == "Linux" ]]; then
  config=".config"
else
  config="Library/Application Support"
fi

if [[ -r "$HOME/$config/io.datasette.llm/default_model.txt" ]]; then
    model=$(cat "$HOME/$config/io.datasette.llm/default_model.txt")
else
    model=$(llm models default)
fi

help() {
  [[ -n "$1" ]] && echo "  /flash    - Flash the current focus."
  cat <<END
  /choose   - Switch pane capture focus.
  /mindwipe - Forget this crazy world and start over.
  /dui      - Let the AI run commands. (current: $DUI)
  /model    - Switch model.
  /sshot    - Raster screenshot.
  /[off|on] - Toggle capture.
  shell-cmd | sq-add [-c cid] [prompt] - Add the output of shell-cmd to the context.

END
  if [[ -n "$1" ]]; then 
    {
        echo "  * **Model**: $model"
        echo "  * **CID**: ${conv_id:-*(Not available until first message)*}"
        echo -e "  * **System Prompt**:\n> " $system 
    } | $MDREAD
  fi
}
system=$(cat <<END
You're an interactive debugging buddy in tmux. You'll get capture-pane -p followed by questions when the pane output changes. 
They're using $(uname -ar) and can change the capture focus. You will be notified when this happens and when our cid is established. These come in the form (Note: <message>).
They're using a markdown formatter. Only insert newlines into code braces for syntax.
They can do the following: $(help)
ONLY If DUI is "ON", your output will be grepped - whatever is inside this syntax "<ðŸ¥‚command ðŸš—>" will be run in bash with the output returned to you. If it is off, do not talk about it. The user manually turned it off and they don't want to hear about it. If you want the user to run something, don't use the special syntax. That is only for you. Your current path is $PWD.
END
)

pane_id=${1-}
capture=0
conv=
forcecapture=
[[ -r $MDIR/${pane_id}.convo ]] && conv_id=$(cat $MDIR/${pane_id}.convo) || conv_id=

touch $MDIR/${pane_id}.convo 
touch $MDIR/${pane_id}.old

flash() {
    tmux select-pane -t $pane_id -P 'bg=colour95'; sleep 0.03
    tmux select-pane -t $pane_id -P 'bg=color129'; sleep 0.03
    tmux select-pane -t $pane_id -P 'bg=default' 
    tmux select-pane -t $my_id
    set_prompt
}

getmodel() {
    if [[ -r "$HOME/$config/io.datasette.llm/default_model.txt" ]]; then
        model=$(cat "$HOME/$config/io.datasette.llm/default_model.txt")
    else
        model=$(llm models default)
    fi
    model=$(echo "$model" | cut -d '/' -f 3-)
}

getmodel

set_prompt() {
    base="--â–¸"
    [[ -n "$capture" ]] && base="ðŸ“·â–¸"
    prompt="$base "
}

choose() {
    tmux display-panes -d 0 "run-shell 'echo %% > $MDIR/pane-id'"
    if [[ $? == "1" ]] ; then
        echo "Exiting due to possible infinite loop."
        exit 1
    fi
    if [[ -e $MDIR/pane-id ]]; then 
        pane_id=$(cat $MDIR/pane-id)
        echo "Using $pane_id"
        flash
        rm $MDIR/pane-id
        tmux select-pane -t $my_id
        touch $MDIR/${pane_id}.{convo,old}
        INJECT=" (Note: User changed focus to a new tmux pane)"
    else
        echo "Cancelled"
    fi
}

last() {
    amount=${1:-40}
    if [[ -z "$conv_id" ]]; then
        if [[ -r $MDIR/last.conv ]]; then
            conv_id=$( cat $MDIR/last.convo )
        else 
            conv_id=$(sqlite3 "$HOME/$config/io.datasette.llm/logs.db" "select conversation_id from responses order by datetime_utc desc limit 1")
        fi
    fi
    { echo "# [ $conv_id ] "; llm logs list --cid $conv_id | tail -$amount; } | $MDREAD -c <(echo -e "[style]\nMargin = 4")
    conv="--cid $conv_id"
}

mindwipe() {
    echo "Memory has been wiped."
    conv=
    conv_id=
    getmodel
    forcecapture=1
}

process_cmd() {
    {
        grep -Po '<ðŸ¥‚\K(.*)(?=ðŸš—>)' "$1" | while read match; do
            if [[ $DUI == "ON" ]]; then
                echo "### Running $match"  
                where=$(mktemp -p $MDIR)
                echo "\`\`\`bash"
                echo "$match" > ${where}.in
                bash ${where}.in | tee ${where}.out | head -30
                echo "\`\`\`"
                cat ${where}.out | llm "command: $match" $conv
            else
                echo "~~ $match ~~ "
            fi
        done
    } | tee "$2" | $MDREAD -c <(echo -e "[style]\nMargin = 4")
}

oneshot() {
    echo "$*" >> $MDIR/input.txt
    llm "$*" -s "$system" $conv >> $MDIR/output.txt &
}
    
dui() {
    if [[ $DUI == "ON" ]] then
        DUI=OFF
        echo "Sobering up.";
        oneshot "(Note: DUI is now off. Do not talk about it. It no longer exists you. Piping into sq-add is still available)"
    else
        DUI=ON
        echo "Fuck it, let's roll!"
        oneshot "(Note: DUI is now $DUI. You may use it now. You can do this in a loop if needed)"
    fi
    echo $DUI > $MDIR/DUI
} 

my_id=$(tmux display-message -p '#{pane_id}')
set_prompt
ata=""
if [[ -n "$conv_id" ]]; then
    last 5
else
    echo "Conversation Start: Type /help for options"
fi
flash

while [ 0 ]; do 
    echo
    input=""
    pline="$prompt"
    while IFS= read -rep "$pline" line || exit; do
        if [[ "$line" == *\\ ]]; then
            input+="${line%\\}"
            input+=$'\n'
        else
            input+="$line"
            break
        fi
        pline="  â¸½ "
    done
    echo 

    _uuid=$(date +%s.%N)

    [[ -z "$input" ]] && break
    history -s "$input"  # Save to history
 
    if [[ $input =~ ^/ ]]; then
        if [[ $input =~ ^/sshot ]]; then
            sshot=$(mktemp --suffix=.png -p $MDIR)
            import $sshot
            ata="-a $sshot"
            echo "Next prompt will use your screen shot"
        elif [[ $input =~ (last|dui|mindwipe|choose|flash) ]]; then
            ${input:1}
        elif [[ $input == "/model" ]]; then
            chosen=$(llm models list | fzf-tmux | cut -d ':' -f 2- | sed 's/^\s//g' )
            if [[ -n "$chosen" ]]; then
              echo "Setting to $chosen"
              llm models default $chosen
              mindwipe
            fi
        elif [[ $input == "/off" ]]; then
            echo "Capturing off"
            capture=
            INJECT="$INJECT (Note: User turned capture off)"
        elif [[ $input == "/on" ]]; then
            while ! tmux list-panes -t "$pane_id" &>/dev/null; do
                echo "Woops, the pane disappeared. Choose another!"
                choose
            done

            flash
            echo "Capturing on"
            INJECT="$INJECT (Note: User turned capture on)"
            capture=0
        else
            help 1
        fi
        set_prompt
        continue
    else
        text="$input"
    fi

    # synchronize input & output
    { echo -e "\n\n"; echo "$conv_id:${_uuid}"; } | tee -a $MDIR/input.txt | cat >> $MDIR/output.txt 
    echo "($text)" >> $MDIR/input.txt

    if [[ -n "$capture" ]]; then
        while ! tmux capture-pane -t "${pane_id}" -p > $MDIR/${pane_id}.new; do
            echo "Choose another pane"
            choose
        done
    fi

    {
       if [[ -n "$capture" ]]; then
            _pid=$(tmux display -pt "$pane_id" '#{pane_pid}')
            {
                if [[ $(uname) == "Linux" ]]; then
                    echo "[process hierarchy: $(ps -o comm= --ppid $_pid -p $_pid)]"
                fi

                if [[ -n "$forcecapture" ]]; then
                    cat $MDIR/${pane_id}.new
                    focecapture=
                else
                    diff $MDIR/${pane_id}.new $MDIR/${pane_id}.old > /dev/null \
                        && echo \
                        || { echo "[capture-pane -p:"; cat $MDIR/${pane_id}.new; echo "]"; }
                   cp $MDIR/${pane_id}.new $MDIR/${pane_id}.old
                fi
            } | grep -Ev "^$"         \
              | tee -a $MDIR/input.txt 
         fi

    } | llm "${text}${INJECT}" -s "$system" $ata $conv \
      | tee $MDIR/out_${_uuid}-0.txt \
      | $MDREAD -c <(echo -e "[style]\nMargin = 4")

    if [[ $DUI == "ON" ]]; then
        n=0
        while true; do
            in="$MDIR/out_${_uuid}-$n.txt"
            (( n++ ))
            out="$MDIR/out_${_uuid}-$n.txt"
            process_cmd "$in" "$out"
            [[ -s "$out" ]] || break
        done
    fi

    echo "${text}${INJECT}" >> $MDIR/input.txt

    INJECT=

    if [[ -z "$conv" ]]; then
        conv_id=$(sqlite3 "$HOME/$config/io.datasette.llm/logs.db" "select conversation_id from responses order by datetime_utc desc limit 1")
        echo $conv_id > $MDIR/${pane_id}.convo
        echo $conv_id > $MDIR/last.convo
        conv="--cid $conv_id"
        INJECT=" (Note: cid is $conv_id - there is no need to mention this)"
    fi
    ata=""
done
