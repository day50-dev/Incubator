#!/bin/bash
# there's a few commands and /help documents them

#set -eEuo pipefail
#trap 'echo "Error on line $LINENO"; read -rp "Press enter to exit..."; exit 1' ERR

me=$(whoami)
MDIR=/tmp/screen-query/$me
[[ -d $MDIR ]] || mkdir $MDIR

LOG=$MDIR/$(date +%s).md
HISTFILE="$MDIR/history"
HISTSIZE=1000
INJECT=
MDREAD=sd
[[ -r $HOME/.local/bin/sd ]] && MDREAD=$HOME/.local/bin/sd
[[ -f "$HISTFILE" ]] || touch "$HISTFILE"
history -r "$HISTFILE"
trap 'history -w "$HISTFILE"' EXIT

if [[ -r "$HOME/.config/io.datasette.llm/default_model.txt" ]]; then
    model=$(cat $HOME/.config/io.datasette.llm/default_model.txt)
else
    model=$(llm models default)
fi

help() {
  [[ -n "$1" ]] && echo "  /flash    - Flash the current focus."
  cat <<END
  /choose   - Switch pane capture focus.
  /mindwipe - Forget this crazy world and start over.
  /model    - Switch model.
  /sshot    - Raster screenshot.
  /[off|on] - Toggle capture.
  \$cmd | sq-add [cid] - Add the output of cmd to the context.

END
  if [[ -n "$1" ]]; then 
    {
        echo "  * **PWD**: $(pwd)"
        echo "  * **Model**: $model"
        echo "  * **CID**: ${convo_id:-*(Not available until first message)*}"
        echo -e "  * **System Prompt**:\n> " $system 
    } | $MDREAD
  fi
}

running=$(ps -u $me -o comm= | sed -E 's/[^a-zA-Z0-9]/ /g' | tr -s ' ' | cut -d ' ' -f 1 | sort | uniq | tr '\n' ' ')
system=$(cat <<END
You're an interactive debugging buddy in tmux. You'll get capture-pane -p followed by questions when the pane output changes. 
They're using $(uname -ar) with $(getent passwd $me | awk -F / '{print $NF}') and can change the capture focus. You will be notified when this happens.
They're using a markdown formatter. Only insert newlines into code braces for syntax.
They can do the following: $(help)
Here's a ps: $running
END
)

pane_id=${1-}
capture=0
conv=
[[ -r $MDIR/${pane_id}.convo ]] && convo_id=$(cat $MDIR/${pane_id}.convo) || convo_id=

touch $MDIR/${pane_id}.convo 
touch $MDIR/${pane_id}.old

flash() {
    tmux select-pane -t $pane_id -P 'bg=colour95'; sleep 0.03
    tmux select-pane -t $pane_id -P 'bg=color129'; sleep 0.03
    tmux select-pane -t $pane_id -P 'bg=default' 
    tmux select-pane -t $my_id
    set_prompt
}

getmodel() {
    if [[ -r "$HOME/.config/io.datasette.llm/default_model.txt" ]]; then
        model=$(cat $HOME/.config/io.datasette.llm/default_model.txt)
    else
        model=$(llm models default)
    fi
    model=$(echo "$model" | cut -d '/' -f 3-)
}

getmodel

set_prompt() {
    base="--â–¸"
    [[ -n "$capture" ]] && base="ðŸ“·â–¸"
    prompt="$base "
}

choose() {
    tmux display-panes -d 0 "run-shell 'echo %% > $MDIR/pane-id'"
    if [[ $? == "1" ]] ; then
        echo "Exiting due to possible infinite loop."
        exit 1
    fi
    if [[ -e $MDIR/pane-id ]]; then 
        pane_id=$(cat $MDIR/pane-id)
        echo "Using $pane_id"
        flash
        rm $MDIR/pane-id
        tmux select-pane -t $my_id
        touch $MDIR/${pane_id}.{convo,old}
        INJECT=" (Note: $(whoami) changed focus to a new tmux pane)"
    else
        echo "Cancelled"
    fi
}

last() {
    if [[ -z "$convo_id" ]]; then
        if [[ -r $MDIR/last.conv ]]; then
            convo_id=$( cat $MDIR/last.convo )
        else 
            convo_id=$(sqlite3 $(llm logs path) "select conversation_id from responses order by datetime_utc desc limit 1")
        fi
    fi
    { echo "# [ $convo_id ] "; llm logs list --cid $convo_id | tail -$1; } | $MDREAD -c <(echo -e "[style]\nMargin = 4")
    conv="--cid $convo_id"
}

mindwipe() {
    echo "Memory has been wiped."
    conv=
    getmodel
}

my_id=$(tmux display-message -p '#{pane_id}')
set_prompt
ata=""
if [[ -n "$convo_id" ]]; then
    last 5
else
    echo "Conversation Start: Type /help for options"
fi
flash

while [ 0 ]; do 
    echo
    input=""
    pline="$prompt"
    while IFS= read -rep "$pline" line || exit; do
        if [[ "$line" == *\\ ]]; then
            input+="${line%\\}"
            input+=$'\n'
        else
            input+="$line"
            break
        fi
        pline="  â¸½ "
    done
    echo 

    _uuid=$(date +%s.%N)

    [[ -z "$input" ]] && break
    history -s "$input"  # Save to history
 
if [[ $input =~ ^/ ]]; then
        if [[ $input =~ ^/add[[:space:]]+(.*)$ ]]; then
            cmd=${BASH_REMATCH[1]}
            filename=${BASH_REMATCH[1]}
            text=${BASH_REMATCH[2]}
            if [[ "${filename:0:1}" == "/" || -e "$filename" ]]; then
                if [[ -e "$filename" ]]; then
                    echo "Adding $filename"
                    cat "$filename" | llm "$(whoami) is adding a file through a slash command. It is named $filename. They will ask you a question about it in the next message. Your response to this one goes to /dev/null" -s "$system" $conv >> $MDIR/output.txt
                else
                    echo "Woops, check your spelling, ($filename) not found"
                fi
            else
                echo "Running $filename"
                $filename | tee $MDIR/cmd.$_uuid | llm "$(whoami) is adding the output of $filename They will ask you a question about it in the next message. Your response to this one goes to /dev/null." -s "$system" $conv >> $MDIR/output.txt
                echo "Output in $MDIR/cmd.$_uuid"
            fi
        elif [[ $input =~ ^/sshot ]]; then
            sshot=$(mktemp --suffix=.png -p $MDIR)
            import $sshot
            ata="-a $sshot"
            echo "Next prompt will use your screen shot"
        elif [[ $input == "/last" ]]; then
            last 40
        elif [[ $input == "/mindwipe" ]]; then
            mindwipe
        elif [[ $input == "/choose" ]]; then
            choose
        elif [[ $input == "/flash" ]]; then
            flash
        elif [[ $input == "/model" ]]; then
            chosen=$(llm models list | fzf | cut -d ':' -f 2- | sed 's/^\s//g' )
            if [[ -n "$chosen" ]]; then
              echo "Setting to $chosen"
              llm models default $chosen
              mindwipe
            fi
        elif [[ $input == "/off" ]]; then
            echo "Capturing off"
            capture=
        elif [[ $input == "/on" ]]; then
            while ! tmux list-panes -t "$pane_id" &>/dev/null; do
                echo "Woops, the pane disappeared. Choose another!"
                choose
            done

            flash
            echo "Capturing on"
            capture=0
        else
            help 1
        fi
        set_prompt
        continue
    else
        text="$input"
    fi

    # synchronize input & output
    { echo -e "\n\n"; echo "{$convo_id}:${_uuid}"; } | tee -a $MDIR/input.txt | cat >> $MDIR/output.txt 
    echo "($text)" >> $MDIR/input.txt

    while ! tmux capture-pane -t "${pane_id}" -p > $MDIR/${pane_id}.new; do
        echo "Choose another pane"
        choose
    done

    {
        if [[ -n "$capture" ]]; then
            _pid=$(tmux display -pt "$pane_id" '#{pane_pid}')
            {
                echo "[process hierarchy: $(ps -o comm= --ppid $_pid -p $_pid)]"
                diff $MDIR/${pane_id}.new $MDIR/${pane_id}.old > /dev/null \
                    && echo \
                    || cat $MDIR/${pane_id}.new

                cp $MDIR/${pane_id}.new $MDIR/${pane_id}.old
            } | grep -Ev '^$'         \
              | tee -a $MDIR/input.txt 
         fi

     } | llm "${text}${INJECT}" -s "$system" $ata $conv \
       | tee -a $MDIR/output.txt \
       | $MDREAD -c <(echo -e "[style]\nMargin = 4")

    INJECT=

    if [[ -z "$conv" ]]; then
        convo_id=$(sqlite3 $(llm logs path) "select conversation_id from responses order by datetime_utc desc limit 1")
        echo $convo_id > $MDIR/${pane_id}.convo
        echo $convo_id > $MDIR/last.convo
        conv="--cid $convo_id"
    fi
    ata=""
done
