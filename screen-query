#!/bin/bash
# there's a few commands and /help documents them

MDIR=/tmp/screen-query
LOG=$MDIR/$(date +%s).md
MDREADER=$(which sd)

HISTFILE="$MDIR/history"
HISTSIZE=1000
[[ -f "$HISTFILE" ]] || touch "$HISTFILE"
history -r "$HISTFILE"
trap 'history -w "$HISTFILE"' EXIT

[[ -r $MDREADER ]] || MDREADER=$(which glow)
[[ -r $MDREADER ]] || MDREADER=cat
[[ -d $MDIR ]] || mkdir $MDIR

if [[ -r "$HOME/.config/io.datasette.llm/default_model.txt" ]]; then
    model=$(cat $HOME/.config/io.datasette.llm/default_model.txt)
else
    model=$(llm models default)
fi

model=$(echo "$model" | cut -d '/' -f 2-)
system=$(cat <<END
You are an interactive ai debugging buddy connected to a terminal. 
You are going to be getting screen scrapes of $(whoami)'s terminal as they ask you questions. 
The uname -ar is "$(uname -ar)". 
$(whoami)'s normal PS1 is $PS1 and will be moving back and forth, talking to you and trying things out. 
You will be getting new screen scrapes as the conversation progresses. 
$(whoami) is using a formatter, only insert newlines into code braces for syntactical reasons, you should not line break long lines yourself. 
If you receive input starting with a / then $(whoami) was trying to use a slash command at the prompt that was not recognized. 
It is likely to be a typo and was not intended for you.
END
)

pane_id=$1
touch $MDIR/${pane_id}.convo 
capture=0
prompt="$model $pane_id:ðŸ“· >"
touch $MDIR/${pane_id}.old
conv=
convo_id=$(cat $MDIR/${pane_id}.convo)

if [[ -n "$convo_id" ]]; then 
    echo "$pane_id: Using convo $convo_id"
else
    echo "$pane_id: New convo"
fi

flash() {
    tmux select-pane -t $pane_id -P 'bg=colour95'; sleep 0.02
    tmux select-pane -t $pane_id -P 'bg=default' ; sleep 0.04
    tmux select-pane -t $pane_id -P 'bg=color129'; sleep 0.02
    tmux select-pane -t $pane_id -P 'bg=default' ; sleep 0.04
    prompt="$model $pane_id:ðŸ“· >"
    tmux select-pane -t $my_id
}

my_id=$(tmux display-message -p '#{pane_id}')
while [ 0 ]; do 
    echo
    read -ep "$prompt " input
    echo 

    [[ -z "$input" ]] && break
    history -s "$input"  # Save to history
    ata=""
 
    if [[ $input =~ ^/add[[:space:]]+(.*)$ ]]; then
        cmd=${BASH_REMATCH[1]}
        filename=${BASH_REMATCH[1]}
        text=${BASH_REMATCH[2]}
        if [[ "${filename:0:1}" == "/" ]]; then
            if [[ -e "$filename" ]]; then
                echo "Adding $filename"
                cat $filename | llm "$(whoami) is adding a file through a slash command. It is named $filename." -s "$system" $conv > /dev/null
            else
                echo "Woops, check your spelling, ($filename) not found"
            fi
        else
            echo "Running $filename"
            $filename | llm "$(whoami) is adding the output of $filename" -s "$system" $conv > /dev/null
        fi
        continue
    elif [[ $input =~ ^/sshot[[:space:]]+(.*)$ ]]; then
        sshot=$(mktemp --suffix=.png -p $MDIR)
        import $sshot
        ata="-a $sshot"
        text=${BASH_REMATCH[1]}
    elif [[ $input == "/help" ]]; then
        cat <<END
  /add < path | cmd > - add a path or command output to the context window
  /sshot < query >    - take an imagemagick screenshot and ask a question
  /mindwipe           - forget this crazy world and start over
  /choose             - change the tmux pane capture focus
  /off                - turn off tmux capture
  /on                 - turn back on tmux capture
END
        continue
    elif [[ $input == "/choose" ]]; then
        tmux display-panes -d 0 "run-shell 'echo %% > $MDIR/pane-id'"
        if [[ -e $MDIR/pane-id ]]; then 
            pane_id=$(cat $MDIR/pane-id)
            echo "Using $pane_id"
            flash
            rm $MDIR/pane-id
            tmux select-pane -t $my_id
            touch $MDIR/${pane_id}.{convo,old}
        else
            echo "Cancelled"
        fi
        continue
    elif [[ $input == "/flash" ]]; then
        flash
        continue
    elif [[ $input == "/off" ]]; then
        flash
        echo "Capturing off"
        prompt="$model >"
        capture=
        continue
    elif [[ $input == "/mindwipe" ]]; then
        echo "Memory has been wiped."
        conv=
        continue
    elif [[ $input == "/on" ]]; then
        flash
        echo "Capturing on"
        prompt="$model $pane_id:ðŸ“· >"
        capture=0
        continue
    else
        text="$input"
    fi

    # synchronize input & output
    { echo -e "\n\n"; uuidgen; } | tee -a $MDIR/input.txt | cat >> $MDIR/output.txt 
    echo "($text)" >> $MDIR/input.txt

    if [[ -n "$capture" ]]; then
        tmux capture-pane -t "${pane_id}" -p > $MDIR/${pane_id}.new
        {
            diff $MDIR/${pane_id}.new $MDIR/${pane_id}.old > /dev/null && echo || cat $MDIR/${pane_id}.new; 
        } | grep -Ev '^$' | tee -a $MDIR/input.txt | llm "$text" -s "$system" $ata $conv | tee -a $MDIR/output.txt | $MDREADER

        cp $MDIR/${pane_id}.new $MDIR/${pane_id}.old
    else
        llm "$text" -s "$system" $ata $conv | tee -a $MDIR/output.txt | $MDREADER
    fi

    if [[ -z "$conv" ]]; then
        convo_id=$(sqlite3 $(llm logs path) "select conversation_id from responses order by datetime_utc desc limit 1")
        echo $convo_id > $MDIR/${pane_id}.convo
        conv="--cid $convo_id"
    fi
done
