#!/bin/bash
# there's a few commands and /help documents them

#set -eEuo pipefail
#trap 'echo "Error on line $LINENO"; read -rp "Press enter to exit..."; exit 1' ERR

MDIR=/tmp/screen-query
[[ -d $MDIR ]] || mkdir $MDIR

LOG=$MDIR/$(date +%s).md
MDREADER=$(which sd)
HISTFILE="$MDIR/history"
HISTSIZE=1000
INJECT=

[[ -r $MDREADER ]] || MDREADER=$(which glow)
[[ -r $MDREADER ]] || MDREADER=cat
[[ -f "$HISTFILE" ]] || touch "$HISTFILE"
history -r "$HISTFILE"
trap 'history -w "$HISTFILE"' EXIT

if [[ -r "$HOME/.config/io.datasette.llm/default_model.txt" ]]; then
    model=$(cat $HOME/.config/io.datasette.llm/default_model.txt)
else
    model=$(llm models default)
fi

help() {
  cat <<END
  /add [path | cmd] - add a path or command output to the context window
  /sshot            - take an imagemagick screenshot and ask a question
  /mindwipe         - forget this crazy world and start over
  /flash            - flash the current focus
  /choose           - change the tmux pane capture focus
  /off              - turn off capture
  /on               - turn on capture
  PWD: $(pwd) | Model: $model | Cid: $conv_id
END
}

running=$(ps -u $(whoami) -o comm= | sed -E 's/[^a-zA-Z0-9]/ /g' | tr -s ' ' | cut -d ' ' -f 1 | sort | uniq | tr '\n' ' ')
system=$(cat <<END
You are an interactive debugging buddy connected to a tmux session. 
You will get tmux capture-pane -p of what $(whoami) is working on as they ask you questions. 
The uname -ar is "$(uname -ar)". If they refer to you seeing, they are talking about the screen scrapes or screenshots
$(whoami)'s is able to open up new panes and change the capture focus.
You will get new captures if the diff is non-zero. 
$(whoami) is using a markdown formatter, only insert newlines into code braces for syntactical reasons, you should not line break long lines yourself. 
$(whoami) can use these commands: $(help)
Also they can pipe commands through "sqa" in the active working pane
Here's a very truncated ps to understand what $(whoami) is using: $running
END
)

pane_id=${1-}
capture=0
conv=
[[ -r $MDIR/${pane_id}.convo ]] && convo_id=$(cat $MDIR/${pane_id}.convo) || convo_id=

touch $MDIR/${pane_id}.convo 
touch $MDIR/${pane_id}.old

flash() {
    {
        tmux select-pane -t $pane_id -P 'bg=colour95'; sleep 0.03
        tmux select-pane -t $pane_id -P 'bg=color129'; sleep 0.03
        tmux select-pane -t $pane_id -P 'bg=default' 
        tmux select-pane -t $my_id
    } &
    set_prompt
}

set_prompt() {
    base="  "
    [[ -n "$capture" ]] && base="ðŸ“·"
    if [[ -r "$HOME/.config/io.datasette.llm/default_model.txt" ]]; then
        model=$(cat $HOME/.config/io.datasette.llm/default_model.txt)
    else
        model=$(llm models default)
    fi
    model=$(echo "$model" | cut -d '/' -f 3-)
    base="$base $model"
    prompt="$base > "
}

choose() {
    tmux display-panes -d 0 "run-shell 'echo %% > $MDIR/pane-id'"
    if [[ -e $MDIR/pane-id ]]; then 
        pane_id=$(cat $MDIR/pane-id)
        echo "Using $pane_id"
        flash
        rm $MDIR/pane-id
        tmux select-pane -t $my_id
        touch $MDIR/${pane_id}.{convo,old}
        INJECT=" (Note: $(whoami) moved to a new tmux pane)"
    else
        echo "Cancelled"
    fi
}

my_id=$(tmux display-message -p '#{pane_id}')
set_prompt
ata=""
echo "Conversation ${convo_id:-start}"
flash

while [ 0 ]; do 
    echo
	input=""
	pline="$prompt"
	while IFS= read -rep "$pline" line || exit; do
        if [[ "$line" == *\\ ]]; then
            input+="${line%\\}"
            input+=$'\n'
        else
            input+="$line"
            break
        fi
        pline="  â¸½ "
	done
    echo 

    _uuid=$(uuidgen)

    [[ -z "$input" ]] && break
    history -s "$input"  # Save to history
 
    if [[ $input =~ ^/ ]]; then
        if [[ $input =~ ^/add[[:space:]]+(.*)$ ]]; then
            cmd=${BASH_REMATCH[1]}
            filename=${BASH_REMATCH[1]}
            text=${BASH_REMATCH[2]}
            if [[ "${filename:0:1}" == "/" || -e "$filename" ]]; then
                if [[ -e "$filename" ]]; then
                    echo "Adding $filename"
                    cat "$filename" | llm "$(whoami) is adding a file through a slash command. It is named $filename. They will ask you a question about it in the next message. Your response to this one goes to /dev/null" -s "$system" $conv >> $MDIR/output.txt
                else
                    echo "Woops, check your spelling, ($filename) not found"
                fi
            else
                echo "Running $filename"
                $filename | tee $MDIR/cmd.$_uuid | llm "$(whoami) is adding the output of $filename They will ask you a question about it in the next message. Your response to this one goes to /dev/null." -s "$system" $conv >> $MDIR/output.txt
                echo "Output in $MDIR/cmd.$_uuid"
            fi
        elif [[ $input =~ ^/sshot ]]; then
            sshot=$(mktemp --suffix=.png -p $MDIR)
            import $sshot
            ata="-a $sshot"
            echo "Next prompt will use your screen shot"
        elif [[ $input == "/choose" ]]; then
            choose
        elif [[ $input == "/flash" ]]; then
            flash
        elif [[ $input == "/off" ]]; then
            flash
            echo "Capturing off"
            capture=
        elif [[ $input == "/mindwipe" ]]; then
            echo "Memory has been wiped."
            conv=
        elif [[ $input == "/on" ]]; then
            flash
            echo "Capturing on"
            capture=0
        else
            help
        fi
        set_prompt
        continue
    else
        text="$input"
    fi

    # synchronize input & output
    { echo -e "\n\n"; echo "{$convo_id}:${_uuid}"; } | tee -a $MDIR/input.txt | cat >> $MDIR/output.txt 
    echo "($text)" >> $MDIR/input.txt

    if [[ -n "$capture" ]]; then
        while ! tmux capture-pane -t "${pane_id}" -p > $MDIR/${pane_id}.new; do
            echo "Choose another pane"
            choose
        done

        {
            diff $MDIR/${pane_id}.new $MDIR/${pane_id}.old > /dev/null \
                && echo \
                || cat $MDIR/${pane_id}.new; 

        }   | grep -Ev '^$'         \
            | tee -a $MDIR/input.txt \
            | ( llm "${text}${INJECT}" -s "$system" $ata $conv || echo ) \
            | tee -a $MDIR/output.txt \
            | $MDREADER
        
        cp $MDIR/${pane_id}.new $MDIR/${pane_id}.old
    else
        llm "$text${INJECT}" -s "$system" $ata $conv \
            | tee -a $MDIR/output.txt \
            | $MDREADER
    fi
    INJECT=

    if [[ -z "$conv" ]]; then
        convo_id=$(sqlite3 $(llm logs path) "select conversation_id from responses order by datetime_utc desc limit 1")
        echo $convo_id > $MDIR/${pane_id}.convo
        echo $convo_id > $MDIR/last.convo
        conv="--cid $convo_id"
    fi
    ata=""
done
